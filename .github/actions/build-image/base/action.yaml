name: "Build and push image to ghcr.io"
description: "Build and push image to ghcr.io"
inputs:
  # restore
  gitlab_token: # todo change to matrix input to support multiple customers
    description: ""
    required: false
    default: ""
  read_package_pat:
    description: "PAT for reading packages"
    required: true
  # build
  context:
    description: "Path to context"
    required: true
  dockerfile_path:
    description: ""
    default: dockerfiles/Dockerfile.generic
  github_run_id:
    description: ""
    required: false
    default: latest
  architecture:
    required: false
    description: "Which architectures to build for"
    default: "linux/amd64,linux/arm64"
  build-args:
    description: "Build arguments for docker build"
    required: false
    default: ""
  # push
  image_tag:
    description: "if set, will be used as tag instead of the default autogenerated tags"
    required: false
    default: ""
  image_name:
    description: "Name of the image to build"
    required: true
  target:
    description: "Sets the target stage to build"
    required: false
    default: ""
  # upload
  push_image:
    description: Should we push the image
    required: false
    default: "true"
  upload_image:
    description: Should we upload the image as an artifact
    required: false
    default: "false"
  TRIFORK_GITHUB_PAT:
    description: A personal access token with permission to publish a package to the Trifork GitHub container registry
    required: false
        
runs:
  using: composite
  steps:
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3

    - name: Log in to the Container registry
      uses: docker/login-action@1220aa36aaf257e736f1d64e3b87c4878665836f
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ inputs.TRIFORK_GITHUB_PAT || github.token }}

    - name: Replace trifork in image_name
      id: replaced
      uses: frabert/replace-string-action@v2
      with:
        pattern: "trifork/(.*)"
        string: ${{ inputs.image_name }}
        replace-with: "$1"

    - name: Log in to the Kamstrup Container registry
      if: inputs.gitlab_token != ''
      uses: docker/login-action@1220aa36aaf257e736f1d64e3b87c4878665836f
      with:
        registry: registry.gitlab.com/kamstrup/dataplatform/external-dependencies
        username: trifork
        password: ${{ inputs.gitlab_token }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta-kamstrup
      uses: docker/metadata-action@879dcbb708d40f8b8679d4f7941b938a086e23a7
      with:
        images: registry.gitlab.com/kamstrup/dataplatform/external-dependencies/${{ steps.replaced.outputs.replaced }}
        labels: |
          org.opencontainers.image.vendor=Trifork
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
        tags: |
          type=raw,value=${{ inputs.image_tag }},enable=${{ inputs.image_tag != '' }}
          type=raw,value=latest,enable={{is_default_branch}}
          type=ref,event=branch,suffix=-${{inputs.github_run_id}}
          type=ref,event=pr
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          
    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@879dcbb708d40f8b8679d4f7941b938a086e23a7
      with:
        images: ghcr.io/${{ inputs.image_name }}
        labels: |
          org.opencontainers.image.vendor=Trifork
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
        tags: |
          type=raw,value=${{ inputs.image_tag }},enable=${{ inputs.image_tag != '' }}
          type=raw,value=latest,enable={{is_default_branch}}
          type=ref,event=branch,suffix=-${{inputs.github_run_id}}
          type=ref,event=pr
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}

    - name: Build Docker image
      uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5
      if: inputs.upload_image != 'true' && inputs.push_image != 'true'
      with:
        context: ${{ inputs.context }}
        platforms: "linux/amd64" # ${{ inputs.architecture }}
        file: ${{ inputs.dockerfile_path }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        target: ${{ inputs.target }}
        builder: ${{ steps.buildx.outputs.name }}
        push: false
        load: true
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: ${{ inputs.build-args }}
        secrets: |
          GITHUB_TOKEN=${{ inputs.read_package_pat }}
          GITHUB_ACTOR=${{ github.actor }}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5
      if: inputs.push_image == 'true'
      with:
        context: ${{ inputs.context }}
        platforms: ${{ inputs.architecture }}
        file: ${{ inputs.dockerfile_path }}
        push: true
        outputs: type=registry
        builder: ${{ steps.buildx.outputs.name }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        target: ${{ inputs.target }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        sbom: true
        build-args: ${{ inputs.build-args }}
        secrets: |
          GITHUB_TOKEN=${{ inputs.read_package_pat }}
          GITHUB_ACTOR=${{ github.actor }}

    - name: Build and export Docker image
      uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5
      if: inputs.upload_image == 'true'
      with:
        context: ${{ inputs.context }}
        # docker exporter does not support exporting manifest lists, use the oci exporter instead
        platforms: "linux/amd64" # ${{ inputs.architecture }}
        file: ${{ inputs.dockerfile_path }}
        outputs: type=docker,dest=/tmp/image.tar
        builder: ${{ steps.buildx.outputs.name }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        target: ${{ inputs.target }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        sbom: false
        build-args: ${{ inputs.build-args }}
        secrets: |
          GITHUB_TOKEN=${{ inputs.read_package_pat }}
          GITHUB_ACTOR=${{ github.actor }}

    - name: Build and push Docker image to Kamstrup
      if: inputs.push_image == 'true' && inputs.gitlab_token != ''
      uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5
      with:
        context: ${{ inputs.context }}
        platforms: ${{ inputs.architecture }}
        file: ${{ inputs.dockerfile_path }}
        push: "true"
        builder: ${{ steps.buildx.outputs.name }}
        tags: ${{ steps.meta-kamstrup.outputs.tags }}
        labels: ${{ steps.meta-kamstrup.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        provenance: false
        build-args: ${{ inputs.build-args }}
        secrets: |
          GITLAB_TOKEN=${{ inputs.gitlab_token }}

    - name: Upload artifact
      if: inputs.upload_image == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: dockerimage
        path: /tmp/image.tar
